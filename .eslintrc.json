//=====================================================================
// eslint configuration file
//
// Will need tweaking, a work in progress
//=====================================================================
{
  "env": {
      "node":     true
  },

  "extends": "",
  "plugins": [],

  "parserOptions" : {
      "ecmaVersion": 6
//    "ecmaFeatures": {
//          // ES6 specific
//          "arrowFunctions":                   true,
//          "binaryLiterals":                   true,
//          "blockBindings":                    true,
//          "classes":                          true,
//          "defaultParams":                    true,
//          "destructuring":                    true,
//          "forOf":                            true,
//          "generators":                       true,
//          "modules":                          true,
//          "objectLiteralComputedProperties":  true,
//          "objectLiteralDuplicateProperties": true,
//          "objectLiteralShorthandMethods":    true,
//          "objectLiteralShorthandProperties": true,
//          "octalLiterals":                    true,
//          "regexUFlag":                       true,
//          "regexYFlag":                       true,
//          "spread":                           true,
//          "superInFunctions":                 true,
//          "templateStrings":                  true,
//          "unicodeCodePointEscapes":          true,
//
//          "globalReturn":                     true,
//          "jsx":                              false
//    }
  },

    //--------------------------------------------------------------------
    // Rules:
    // 0 - turn the rule off
    // 1 - turn the rule on as a warning (doesn't affect exit code)
    // 2 - turn the rule on as an error (exit code will be 1)
    //
    // List of rules see: http://eslint.org/docs/rules/
    //--------------------------------------------------------------------
    "rules": {

        //
        //Possible Errors
        //
        // The following rules point out areas where you might have made mistakes.
        //
        "comma-dangle": 2, // disallow or enforce trailing commas
        "no-cond-assign": 2, // disallow assignment in conditional expressions
        "no-console": 0, // disallow use of console (off by default in the node environment)
        "no-constant-condition": 2, // disallow use of constant expressions in conditions
        "no-control-regex": 2, // disallow control characters in regular expressions
        "no-debugger": 2, // disallow use of debugger
        "no-dupe-args": 2, // disallow duplicate arguments in functions
        "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
        "no-duplicate-case": 2, // disallow a duplicate case label.
        "no-empty": 2, // disallow empty statements
        "no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
        "no-ex-assign": 2, // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0, // disallow unnecessary parentheses
        "no-extra-semi": 2, // disallow unnecessary semicolons
        "no-func-assign": 2, // disallow overwriting functions written as function declarations
        "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
        "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2, // disallow sparse arrays
        "no-unexpected-multiline": 2, // Avoid code that looks like two expressions but is actually one
        "no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2, // disallow comparisons with the value NaN
        "valid-jsdoc": 2, // Ensure JSDoc comments are valid
        "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string

        //
        // Best Practices
        //
        // These are rules designed to prevent you from making mistakes.
        // They either prescribe a better way of doing something or help you avoid footguns.
        //
        "accessor-pairs": 0, // Enforces getter/setter pairs in objects
        "array-callback-return": 0, // Enforces return statements in callbacks of array's methods
        "block-scoped-var": 0, // treat var statements as if they were block scoped. 0: deep destructuring is not compatible https://github.com/eslint/eslint/issues/1863
        "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program
        "consistent-return": 2, // require return statements to either always or never specify values
        "curly": 2, // specify curly brace conventions for all control statements
        "default-case": 2, // require default case in switch statements
        "dot-location": 0, // enforces consistent newlines before or after dots
        "dot-notation": 2, // encourages use of dot notation whenever possible
        "eqeqeq": [1, "smart"], // require the use of === and !==
        "guard-for-in": 2, // make sure for-in loops have an if statement
        "no-alert": 2, // disallow the use of alert, confirm, and prompt
        "no-caller": 2, // disallow use of arguments.caller or arguments.callee
        "no-case-declarations": 2, // disallow lexical declarations in case clauses
        "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression
        "no-else-return": 2, // disallow else after a return in an if
        "no-empty-function": [2, {"allow": ["functions"]}], // disallow use of empty functions
        "no-empty-pattern": 2, // disallow use of empty destructuring patterns
        "no-eq-null": 2, // disallow comparisons to null without a type-checking operator
        "no-eval": 2, // disallow use of eval()
        "no-extend-native": 2, // disallow adding to native types
        "no-extra-bind": 2, // disallow unnecessary function binding
        "no-extra-label": 2, // disallow unnecessary labels
        "no-fallthrough": 2, // disallow fallthrough of case statements
        "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals
        "no-implicit-coercion": 2, // disallow the type conversions with shorter notations
        "no-implicit-globals": 2, // disallow var and named functions in global scope
        "no-implied-eval": 2, // disallow use of eval()-like methods
        "no-invalid-this": 2, // disallow this keywords outside of classes or class-like objects
        "no-iterator": 2, // disallow usage of __iterator__ property
        "no-labels": 2, // disallow use of labeled statements
        "no-lone-blocks": 2, // disallow unnecessary nested blocks
        "no-loop-func": 2, // disallow creation of functions within loops
        "no-multi-spaces": [0, { "exceptions":{ "VariableDeclarator": true }}], // disallow use of multiple spaces, except on var declaration
        "no-multi-str": 2, // disallow use of multiline strings
        "no-native-reassign": 2, // disallow reassignments of native objects
        "no-new": 2, // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2, // disallow use of new operator for Function object
        "no-new-wrappers": 2, // disallows creating new instances of String,Number, and Boolean
        "no-octal": 2, // disallow use of octal literals
        "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-param-reassign": 2, // disallow reassignment of function parameters
        "no-process-env": 2, // disallow use of process.env
        "no-proto": 2, // disallow usage of __proto__ property
        "no-redeclare": 2, // disallow declaring the same variable more then once
        "no-return-assign": 2, // disallow use of assignment in return statement
        "no-script-url": 2, // disallow use of javascript: urls.
        "no-self-assign": 2, // disallow assignments where both sides are exactly the same
        "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
        "no-sequences": 2, // disallow use of comma operator
        "no-throw-literal": 2, // restrict what can be thrown as an exception
        "no-unmodified-loop-condition": 0, // disallow unmodified conditions of loops
        "no-unused-expressions": 2, // disallow usage of expressions in statement position
        "no-unused-labels": 2, // disallow unused labels
        "no-useless-call": 2, // disallow unnecessary .call() and .apply()
        "no-useless-concat": 2, // disallow unnecessary concatenation of literals or template literals
        "no-void": 2, // disallow use of void operator
        //"no-warning-comments": [ 0, { "terms": [ "todo", "fixme" ], "location": "start" } ], // disallow usage of configurable warning terms in comments": 2, // e.g. TODO or FIXME
        "no-with": 2, // disallow use of the with statement
        "radix": 2, // require use of the second argument for parseInt()
        "vars-on-top": 2, // requires to declare all vars on top of their containing scope
        "wrap-iife": [2, "inside"], // require immediate function invocation to be wrapped in parentheses
        "yoda": 2, // require or disallow Yoda conditions

        //
        // Strict Mode
        //
        // These rules relate to using strict mode.
        //
        "strict": 0, // controls location of Use Strict Directives. 0: required by `babel-eslint`

        //
        // Variables
        //
        // These rules have to do with variable declarations.
        //
        "init-declarations": 0, // enforce or disallow variable initializations at definition
        "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 2, // disallow deletion of variables
        "no-label-var": 2, // disallow labels that share a name with a variable
        "no-shadow": 2, // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
        "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 2, // disallow use of undefined when initializing variables
        "no-undefined": 2, // disallow use of undefined variable
        "no-unused-vars": 2, // disallow declaration of variables that are not used in the code
        "no-use-before-define": 0, // disallow use of variables before they are defined

        //
        // Node.js and CommonJS
        // These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.
        //
        "callback-return": 1, // enforce return after a callback
        "global-require": 1, // enforce require() on top-level module scope
        "handle-callback-err": 1, // enforce error handling in callbacks
        "no-mixed-requires": 1, // disallow mixing regular variable and require declarations
        "no-new-require": 1, // disallow use of new operator with the require function
        "no-path-concat": 0, // disallow string concatenation with __dirname and __filename
        "no-process-exit": 0, // disallow process.exit()
        "no-restricted-imports": 0, // restrict usage of specified node imports
        "no-restricted-modules": 0, // restrict usage of specified node modules
        "no-sync": 0, // disallow use of synchronous methods

        //
        //Stylistic Issues
        //
        // These rules are purely matters of style and are quite subjective.
        //
        "array-bracket-spacing": [2, "always"], // enforce spacing inside array brackets
        "block-spacing": 1, // disallow or enforce spaces inside of single line blocks
        "brace-style": [1, "stroustrup", { "allowSingleLine": true }], // enforce one true brace style
        "camelcase": 2, // require camel case names
        //"comma-spacing": [ 1, { "before": false, "after": true } ], // enforce spacing before and after comma
        //"comma-style": [ 1, "last" ], // enforce one true comma style
        "computed-property-spacing": 1, // require or disallow padding inside computed properties
        //"consistent-this": [ 1, "_this" ], // enforces consistent naming when capturing the current execution context
        "eol-last": 1, // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0, // require function expressions to have a name
        "func-style": 0, // enforces use of function declarations or expressions
        "id-blacklist": 1, // blacklist certain identifiers to prevent them being used
        "id-length": [1, { "properties": "never", "exceptions": ["C","c","i","x","y"]}], // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
        "id-match": 1, // require identifiers to match the provided regular expression
        //"indent": [ 1, 2 ], // this option sets a specific tab width for your code
        "jsx-quotes": 0, // specify whether double or single quotes should be used in JSX attributes
        //"key-spacing": [ 1, { "beforeColon": false, "afterColon": true } ], // enforces spacing between keys and values in object literal properties
        "keyword-spacing": 1, // enforce spacing before and after keywords
        "linebreak-style": 2, // disallow mixed 'LF' and 'CRLF' as linebreaks
        "lines-around-comment": 0, // enforce empty lines around comments
        //"max-depth": [ 2, 3 ], // specify the maximum depth that blocks can be nested
        //"max-len": [ 2, 100, 2 ], // specify the maximum length of a line in your program
        //"max-nested-callbacks": [ 1, 3 ], // specify the maximum depth callbacks can be nested
        //"max-params": [ 2, 5 ], // limits the number of parameters that can be used in the function declaration.
        //"max-statements": 0, // specify the maximum number of statement allowed in a function
        //"new-cap": [ 1, { newIsCap: true, capIsNew: false } ], // require a capital letter for constructors
        "new-parens": 1, // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0, // allow/disallow an empty newline after var statement
        "newline-per-chained-call": 0, // enforce newline after each call when chaining the calls
        "no-array-constructor": 1, // disallow use of the Array constructor
        "no-bitwise": 0, // disallow use of bitwise operators
        "no-continue": 0, // disallow use of the continue statement
        "no-inline-comments": 0, // disallow comments inline after code
        "no-lonely-if": 1, // disallow if as the only statement in an else block
        "no-mixed-spaces-and-tabs": 1, // disallow mixed spaces and tabs for indentation
        //"no-multiple-empty-lines": [ 1, { "max": 2 } ], // disallow multiple empty lines
        "no-negated-condition": 0, // disallow negated conditions
        "no-nested-ternary": 1, // disallow nested ternary expressions
        "no-new-object": 1, // disallow use of the Object constructor
        "no-plusplus": 0, // disallow use of unary operators, ++ and --
        //"no-restricted-syntax": [2, "FunctionExpression", "WithStatement"], // disallow use of certain syntax in code
        "no-spaced-func": 1, // disallow space between function identifier and application
        "no-ternary": 0, // disallow the use of ternary operators
        "no-trailing-spaces": 1, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 0, // disallow the use of ternary operators when a simpler alternative exists
        "no-whitespace-before-property": 0, // disallow whitespace before properties
        "object-curly-spacing": [1, "always"], // require or disallow padding inside curly braces
        //"one-var": [ 1, "never" ], // allow just one var statement per function
        "one-var-declaration-per-line": [2, "initializations"], // require or disallow an newline around variable declarations
        //"operator-assignment": [ 1, "never" ], // require assignment operator shorthand where possible or prohibit it entirely
        "operator-linebreak": 0,  // enforce operators to be placed before or after line breaks
        //"padded-blocks": [ 1, "never" ], // enforce padding within blocks
        //"quote-props": [ 1, "as-needed" ], // require quotes around object literal property names
        //"quotes": [ 1, "single" ], // specify whether double or single quotes should be used
        //"require-jsdoc": [2, {  "require": {
        //                                "FunctionDeclaration": true,
        //                                "MethodDefinition": false,
        //                                "ClassDeclaration": false
        //                            }
        //                        }], // Require JSDoc comment
        "semi": [ 1, "always" ], // require or disallow use of semicolons instead of ASI
        //"semi-spacing": [ 1, { "before": false, "after": true } ], // enforce spacing before and after semicolons
        "sort-imports": 0, // sort import declarations within module
        "sort-vars": 0, // sort variables within the same declaration block
        //"space-before-blocks": [ 1, "always" ], // require or disallow space before blocks
        //"space-before-function-paren": [ 1, { "anonymous": "always", "named": "never" } ], // require or disallow space before function opening parenthesis
        //"space-in-parens": [ 1, "never" ], // require or disallow spaces inside parentheses
        //"space-infix-ops": [ 1, "always" ], // require spaces around operators
        //"space-unary-ops": [ 1, { "words": true, "nonwords": false } ], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        //"spaced-comment": [ 1, "always" ], require or disallow a space immediately following the // or /* in a comment
        "wrap-regex": 0, // require regex literals to be wrapped in parentheses

        //
        // ECMAScript 6
        //
        // These rules are only relevant to ES6 environments and are off by default.
        //
        "arrow-body-style": 0, // require braces in arrow function body
        "arrow-parens": 0, // require parens in arrow function arguments
        "arrow-spacing": 0, // require space before/after arrow function's arrow
        "constructor-super": 0, // verify calls of super() in constructors
        "generator-star-spacing": 0, // enforce spacing around the * in generator functions
        "no-class-assign": 0, // disallow modifying variables of class declarations
        "no-confusing-arrow": 0, // disallow arrow functions where they could be confused with comparisons
        "no-const-assign": 0, // disallow modifying variables that are declared using const
        "no-dupe-class-members": 0, // disallow duplicate name in class members
        "no-new-symbol": 0, // disallow use of the new operator with the Symbol object
        "no-this-before-super": 0, // disallow use of this/super before calling super() in constructors
        "no-useless-constructor": 0, // disallow unnecessary constructor
        "no-var": 0, // require let or const instead of var
        "object-shorthand": 0, // require method and property shorthand syntax for object literals
        "prefer-arrow-callback": 0, // suggest using arrow functions as callbacks
        "prefer-const": 0, // suggest using const declaration for variables that are never modified after declared
        "prefer-reflect": 0, // suggest using Reflect methods where applicable
        "prefer-rest-params": 0, // suggest using the rest parameters instead of arguments
        "prefer-spread": 0, // suggest using the spread operator instead of .apply()
        "prefer-template": 0, // suggest using template literals instead of strings concatenation
        "require-yield": 0, // disallow generator functions that do not have yield
        "template-curly-spacing": 0, // enforce spacing around embedded expressions of template strings
        "yield-star-spacing": 0, // enforce spacing around the * in yield* expressions


        //----------------------------------------------------------------------
        "dummy": 0 // dummy rule to make adding and removing rules easier since this has no comma
    }
}
